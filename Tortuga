#!/usr/bin/env python

import rospy
import curses
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose 
from turtlesim.srv import TeleportAbsolute, TeleportRelative
import termios, sys, os
from numpy import pi
from std_msgs.msg import String
from std_srvs.srv import Empty
import tkinter as tk


rospy.init_node('change_turtle_params')

rospy.wait_for_service('/reset')
reset_turtle = rospy.ServiceProxy('/reset', Empty)
reset_turtle()

stdscr = curses.initscr()

teleport_absolute_service = rospy.ServiceProxy('/turtle1/teleport_absolute', TeleportAbsolute)
cmd_vel_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

twist = Twist()
twist.linear.x = 0.0
twist.linear.y = 0.0
twist.angular.z = 0.0

pose = Pose()
pose.x = 5.5
pose.y = 5.5
pose.theta = 0 # grados en radianes

response = teleport_absolute_service(pose.x, pose.y, pose.theta)

while not rospy.is_shutdown():


    def w():
        twist.linear.x = 1.0

    def s():
        twist.linear.x = -1.0

    def a():
        twist.angular.z = pi/2

    def d():
        twist.angular.z = -pi/2

    def espacio():
        twist.angular.z = pi    

    def r():
        pose.x = 5.5
        pose.y = 5.5
        pose.theta = 0          
        response = teleport_absolute_service(pose.x, pose.y, pose.theta)       

    def key(event):
        if event.char == "w":
            w()
        elif event.char == "s":
            s()
        elif event.char == "a":
            a()
        elif event.char == "d":
            d()
        elif event.char == " ":
            espacio()
        elif event.char == "r":
            r()
            
        cmd_vel_publisher.publish(twist)

        twist.linear.x = 0.0
        twist.linear.y = 0.0
        twist.angular.z = 0.0

        tecla = '0'

        rospy.sleep(1)

    root = tk.Tk()

    label = tk.Label(root, text="0")
    label.pack()

    root.bind("<Key>", key)
    root.focus_set()

    root.mainloop()

curses.endwin()